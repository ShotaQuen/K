{
  "database": {
    "files": {
      "index.html": "<!DOCTYPE html>\n<html lang=\"id\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>{{1}}</title>\n    <style>\n      body {\n        background-color: #1e1e2f;\n        color: white;\n        font-family: Arial, sans-serif;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        height: 100vh;\n        margin: 0;\n      }\n      .login-box {\n        background: #2a2a40;\n        padding: 30px;\n        border-radius: 10px;\n        box-shadow: 0 0 10px #6c5ce7;\n        width: 300px;\n      }\n      input, button {\n        width: 100%;\n        padding: 10px;\n        margin-top: 10px;\n        border: none;\n        border-radius: 5px;\n        outline: none;\n      }\n      button {\n        background-color: #6c5ce7;\n        color: white;\n        cursor: pointer;\n      }\n      .error {\n        color: red;\n        margin-top: 10px;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"login-box\">\n      <h2>Login</h2>\n      <input type=\"text\" id=\"username\" placeholder=\"Username\">\n      <input type=\"password\" id=\"password\" placeholder=\"Password\">\n      <button onclick=\"login()\">Masuk</button>\n      <div class=\"error\" id=\"errorMsg\"></div>\n    </div>\n    <script>\n      const USERS = [\n        { username: \"{{2}}\", password: \"{{3}}\" }\n      ];\n\n      function login() {\n        const user = document.getElementById('username').value.trim();\n        const pass = document.getElementById('password').value.trim();\n        const errorMsg = document.getElementById('errorMsg');\n\n        const validUser = USERS.find(u => u.username === user && u.password === pass);\n\n        if (validUser) {\n          sessionStorage.setItem('loggedIn', 'true');\n          window.location.href = 'dashboard.html';\n        } else {\n          errorMsg.textContent = 'Username atau password salah!';\n        }\n      }\n    </script>\n  </body>\n</html>",
      "dashboard.html": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n    <title>{{1}}</title>\n    <style>\n      body {\n        background-color: #1f1b2e;\n        color: white;\n        font-family: 'Segoe UI', sans-serif;\n        padding: 30px;\n      }\n\n      h1 {\n        color: #b18aff;\n        text-align: center;\n        margin-bottom: 30px;\n      }\n\n      .input-group {\n        display: flex;\n        justify-content: center;\n        margin-bottom: 20px;\n      }\n\n      input {\n        padding: 10px;\n        width: 300px;\n        border: none;\n        border-radius: 6px 0 0 6px;\n        outline: none;\n      }\n\n      button {\n        padding: 10px 20px;\n        border: none;\n        border-radius: 0 6px 6px 0;\n        background-color: #7c4dff;\n        color: white;\n        cursor: pointer;\n      }\n\n      button:hover {\n        background-color: #9e7bff;\n      }\n\n      table {\n        width: 100%;\n        margin-top: 30px;\n        border-collapse: collapse;\n      }\n\n      th, td {\n        border: 1px solid #333;\n        padding: 12px;\n        text-align: left;\n      }\n\n      th {\n        background-color: #322c45;\n      }\n\n      td {\n        background-color: #2a253a;\n      }\n\n      .delete-btn {\n        background-color: #e53935;\n        padding: 6px 10px;\n        border: none;\n        color: white;\n        border-radius: 4px;\n        cursor: pointer;\n      }\n\n      .delete-btn:hover {\n        background-color: #f44336;\n      }\n\n      /* Toast notification */\n      .toast {\n        position: fixed;\n        bottom: 30px;\n        right: 30px;\n        background-color: #322c45;\n        color: white;\n        padding: 12px 20px;\n        border-radius: 6px;\n        box-shadow: 0 0 10px #000;\n        opacity: 0;\n        transform: translateY(20px);\n        transition: opacity 0.3s ease, transform 0.3s ease;\n        z-index: 999;\n      }\n\n      .toast.show {\n        opacity: 1;\n        transform: translateY(0);\n      }\n    </style>\n  </head>\n  <body>\n    <h1>{{1}}</h1>\n    <div class=\"input-group\">\n      <input type=\"text\" id=\"nomorInput\" placeholder=\"Masukkan nomor...\">\n      <button onclick=\"tambahNomor()\">Tambah</button>\n    </div>\n    <table>\n      <thead>\n        <tr>\n          <th>Nomor</th>\n          <th>Status</th>\n          <th>Aksi</th>\n        </tr>\n      </thead>\n      <tbody id=\"tabelNomor\"></tbody>\n    </table>\n\n    <div id=\"toast\" class=\"toast\"></div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"></script>\n    <script>\n      const OWNER = '{{4}}'\n      const REPO = '{{5}}'\n      const FILE = '{{6}}'\n      const GITHUB_TOKEN = '{{7}}' // Ganti dengan GitHub Token Anda\n\n      function showToast(message, duration = 3000) {\n        const toast = document.getElementById('toast')\n        toast.textContent = message\n        toast.classList.add('show')\n        setTimeout(() => {\n          toast.classList.remove('show')\n        }, duration)\n      }\n\n      async function getFileSha() {\n        const url = `https://api.github.com/repos/${OWNER}/${REPO}/contents/${FILE}`\n        const res = await axios.get(url, {\n          headers: { Authorization: `token ${GITHUB_TOKEN}` }\n        })\n        return res.data.sha\n      }\n\n      async function getCurrentContent() {\n        const url = `https://api.github.com/repos/${OWNER}/${REPO}/contents/${FILE}`\n        try {\n          const res = await axios.get(url, {\n            headers: { Authorization: `token ${GITHUB_TOKEN}` }\n          })\n          const content = atob(res.data.content)\n          return JSON.parse(content)\n        } catch {\n          return { nomor: [] }\n        }\n      }\n\n      async function updateNomor(isian, aksi = 'tambah') {\n        try {\n          const sha = await getFileSha().catch(() => null)\n          const currentContent = await getCurrentContent()\n\n          if (!Array.isArray(currentContent.nomor)) currentContent.nomor = []\n\n          if (aksi === 'hapus') {\n            currentContent.nomor = currentContent.nomor.filter(n => n !== isian)\n          } else {\n            if (!currentContent.nomor.includes(isian)) {\n              currentContent.nomor.push(isian)\n            }\n          }\n\n          const newContent = btoa(JSON.stringify(currentContent, null, 2))\n\n          await axios.put(`https://api.github.com/repos/${OWNER}/${REPO}/contents/${FILE}`, {\n            message: `Update nomor`,\n            content: newContent,\n            sha\n          }, {\n            headers: { Authorization: `token ${GITHUB_TOKEN}` }\n          })\n\n          loadNomor()\n\n          showToast(aksi === 'hapus' ? 'Nomor berhasil dihapus!' : 'Nomor berhasil ditambahkan!')\n        } catch (error) {\n          console.error(error)\n          showToast('Terjadi kesalahan saat mengupdate.', 4000)\n        }\n      }\n\n      async function loadNomor() {\n        const data = await getCurrentContent()\n        const tbody = document.getElementById(\"tabelNomor\")\n        tbody.innerHTML = \"\"\n\n        data.nomor.forEach(nomor => {\n          const row = document.createElement(\"tr\")\n          row.innerHTML = `\n            <td>${nomor}</td>\n            <td>active</td>\n            <td><button class=\"delete-btn\" onclick=\"hapusNomor('${nomor}')\">Hapus</button></td>\n          `\n          tbody.appendChild(row)\n        })\n      }\n\n      function tambahNomor() {\n        const input = document.getElementById(\"nomorInput\")\n        const nomor = input.value.trim()\n        if (nomor) {\n          updateNomor(nomor, 'tambah')\n          input.value = ''\n        } else {\n          showToast(\"Nomor tidak boleh kosong!\", 3000)\n        }\n      }\n\n      function hapusNomor(nomor) {\n        updateNomor(nomor, 'hapus')\n      }\n\n      loadNomor()\n      if (sessionStorage.getItem('loggedIn') !== 'true') {\n        window.location.href = 'index.html';\n      }\n    </script>\n  </body>\n</html>"
    }
  },
  "biodata": {
    "files": {
      "biodata.html": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>{{1}}</title>\n  </head>\n  <body>\n    <h1>{{1}}</h1>\n    <p>{{2}}</p>\n    <p>IG: {{3}}</p>\n  </body>\n</html>",
      "style.css": "body {\n  font-family: 'Roboto', sans-serif;\n}\n\nh1 {\n  color: #0073e6;\n}",
      "script.js": "console.log('Biodata Loaded');",
      "Cok.html": "Sjjajaj"
    }
  },
  "produk": {
    "files": {
      "produk.html": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>{{1}}</title>\n  </head>\n  <body>\n    <h1>{{1}}</h1>\n    <p>{{2}}</p>\n    <p>Rp {{3}}</p>\n  </body>\n</html>",
      "style.css": "body {\n  font-family: 'Tahoma', sans-serif;\n}\n\nh1 {\n  color: #28a745;\n}",
      "script.js": "console.log('Produk Loaded');"
    }
  }
}